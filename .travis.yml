language: cpp
depth: 3

matrix:
  include:
    - name: Linux Qt 5.5
      os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - QT_REPO="ppa:beineri/opt-qt551-trusty"
        - QT_VERSION="qt55"
        - QTHOME="/opt/${QT_VERSION}"
    - name: Linux Qt 5.6
      os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - QT_REPO="ppa:beineri/opt-qt562-trusty"
        - QT_VERSION="qt56"
        - QTHOME="/opt/${QT_VERSION}"
    - name: Linux Qt 5.7
      os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - QT_REPO="ppa:beineri/opt-qt571-trusty"
        - QT_VERSION="qt57"
        - QTHOME="/opt/${QT_VERSION}"
    - name: Linux Qt 5.8
      os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - QT_REPO="ppa:beineri/opt-qt58-trusty"
        - QT_VERSION="qt58"
        - QTHOME="/opt/${QT_VERSION}"
    - name: Linux Qt 5.9
      os: linux
      dist: trusty
      sudo: true
      compiler: gcc
      env:
        - QT_REPO="ppa:beineri/opt-qt592-trusty"
        - QT_VERSION="qt59"
        - QTHOME="/opt/${QT_VERSION}"
    - name: Windows 64 Bit
      os: windows
      arch: x64
      env:
        - PLATFORM="x64"
        - QT_VERSION="5.12.0"
        - QTHOME="C:/Qt/${QT_VERSION}"
        - QT_COMILER_DIR="${QTHOME}/msvc2017_64"
      cache:
        directories:
          - C:/Qt
    - name: Windows 32 Bit
      os: windows
      arch: x86
      env:
        - PLATFORM="x86"
        - QT_VERSION="5.12.0"
        - QTHOME="C:/Qt/${QT_VERSION}"
        - QT_COMILER_DIR="${QTHOME}/msvc2017"
      cache:
        directories:
          - C:/Qt

before_install:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo add-apt-repository "$QT_REPO" -y;
      sudo apt-get update -qq;
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "windows" ]; then
      # Workaround broken casher implementation that extracts absolute paths to the current working directory
      # See https://github.com/travis-ci/casher/pull/38
      for path in Qt; do
        if [ -d "$path" ]; then
          echo "Restoring C:/$path";
          mv "$path/"* "C:/$path";
        fi;
      done
      # Update checksums to avoid invalidating the cache.
      if [ -d Qt ]; then
        md5deep64 -o f -r "C:/Qt" | sort > ~/.casher/md5sums_before;
      fi
    fi


install:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get install -qq ${QT_VERSION}base ${QT_VERSION}translations ${QT_VERSION}tools ${QT_VERSION}x11extras;
      sudo apt-get install -qq libsqlite3-dev libx11-dev;
      source ${QTHOME}/bin/${QT_VERSION}-env.sh;
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "windows" ]; then
      choco install -y nsis;
      if [ "$PLATFORM" == "x64" ]; then
        export SQLITE_URL=https://www.sqlite.org/2019/sqlite-dll-win64-x64-3270200.zip;
      else
        export SQLITE_URL=https://www.sqlite.org/2019/sqlite-dll-win32-x86-3270200.zip;
      fi
      curl -Lo ~/sqlite3-src.zip https://www.sqlite.org/2019/sqlite-amalgamation-3270200.zip;
      curl -Lo ~/sqlite3.zip $SQLITE_URL
      unzip -j ~/sqlite3-src.zip -d ~/sqlite3
      unzip -uoj ~/sqlite3.zip -d ~/sqlite3
      echo '"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat"' ${PLATFORM} '&& LIB /DEF:%userprofile%\sqlite3\sqlite3.def /OUT:%userprofile%\sqlite3\sqlite3.lib /MACHINE:'${PLATFORM} '|| exit /b 1' | cmd;
      echo "Installed qt versions:" 2> /dev/null;
      find "/c/Qt" -mindepth 1 -maxdepth 1 -type d -name "*.*.*" -printf '%f\n';
      if [ ! -e "${QT_COMILER_DIR}/bin/moc.exe" ]; then
        echo "Downloading Qt installer...";
        curl -Lo ~/qt-unified-windows-x86-online.exe http://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe --progress-bar;
        echo "Executing Qt installer...";
        ~/qt-unified-windows-x86-online.exe --verbose --script tools/qt-installer-windows.qs | grep --line-buffered -vE 'addDownloadable|Url is|addFontToDatabase|Remove Package|QtPatchOperation::getDirContent';
        echo "Removing unneeded files...";
        rm -r "C:/Qt/Examples" 2> /dev/null;
        rm -r "C:/Qt/Docs" 2> /dev/null;
        rm -r "C:/Qt/Tools" 2> /dev/null;
      fi
      echo "QT_COMILER_DIR: ${QT_COMILER_DIR}";
      export CMAKE_PREFIX_PATH="${QT_COMILER_DIR};~/sqlite3/";
      export PATH=$PATH:/c/Program\ Files\ \(x86\)/NSIS/;
      if [ "${PLATFORM}" = "x86" ]; then
        export PLATFORM="Win32";
      fi
    fi

script:
  - mkdir build
  - cd build
  - cmake -A "${PLATFORM}" .. || (code=$?; echo "Error log (CMakeOutput.log):"; cat ./CMakeFiles/CMakeOutput.log; echo "Error log (CMakeError.log):"; cat ./CMakeFiles/CMakeError.log; (exit $code););
  - cmake --build . --config Release --target birdtray

before_deploy:
  - |
    if [ "$TRAVIS_OS_NAME" == "windows" ]; then
      cd installer;
      buildInstaller.bat "..\build\Release\birdtray.exe" "~/sqlite3/sqlite3.dll";
    fi

deploy:
  - provider: releases
    api_key:
      secure: "TODO"
    file_glob: true
    file: "installer/Birdtray-*.exe"
    skip_cleanup: true
    on:
      tags: true
      branch: master
