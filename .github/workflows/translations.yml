name: Check the translations

on:
  push:
    paths:
      - 'src/translations/**.ts'
  pull_request:
    paths:
      - 'src/translations/**.ts'

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Installer translations special checks
        shell: python
        run: |
          import os
          import sys

          from glob import iglob
          from xml.etree import ElementTree
          from subprocess import check_output

          svnUrl = 'svn://svn.code.sf.net/p/nsis/code/NSIS/trunk/Contrib/Language files'
          languageNameFiles = check_output(['svn', 'list', svnUrl]).decode('utf-8')[:-1].split('\n')
          languageNames = set([os.path.splitext(file)[0] for file in languageNameFiles])
          translations = {}
          haveError = False
          for installerTranslation in iglob(os.path.join('src', 'translations', 'installer_*.ts')):
              language = os.path.splitext(os.path.basename(installerTranslation))[0][10:]
              translations[language] = installerTranslation
          for translationFilePath in translations.values():
              translation = ElementTree.parse(translationFilePath)
              languageNameElement = translation.find(
                  'context/message/source[.=\'__LANGUAGE_NAME__\']/../translation')
              if languageNameElement is None:
                  print(f'::error file={translationFilePath},line=1,col=1::' +
                        f'Missing required entry __LANGUAGE_NAME__')
                  haveError = True
              elif languageNameElement.text not in languageNames:
                  languageName = languageNameElement.text
                  with open(translationFilePath) as translationFile:
                      for lineNumber, line in enumerate(translationFile):
                          if f'<translation>{languageName}</translation>' in line:
                              lineNumber += 1
                              break
                      else:
                          lineNumber = 1
                  languageNamesString = '", "'.join(sorted(languageNames))
                  print(f'::error file={translationFilePath},line={lineNumber},col=1::' +
                        f'Invalid __LANGUAGE_NAME__: "{languageName}" is not in the list of ' +
                        f'possible language names: ["{languageNamesString}"]')
                  haveError = True
              for language in translations:
                  languageNameSource = 'Lang_' + language
                  languageNameElement = translation.find(
                      f'context/message/source[.=\'{languageNameSource}\']')
                  if languageNameElement is None:
                      print(f'::warning file={translationFilePath},line=1,col=1::' +
                            f'Missing language name "{languageNameSource}"')
          sys.exit(1 if haveError else 0)
      - name: Prepare the installer translations for linting
        shell: python
        run: |
          import os
          import re

          from glob import iglob
          from xml.etree import ElementTree

          SOURCE_PATTERN = re.compile(r'^\s+<source>(?P<name>.*)</source>$')
          sourceXml = ElementTree.parse(os.path.join('src', 'translations', 'installer_en.ts'))
          sourceMap = {message.find('source').text: message.find('translation').text
                       for message in sourceXml.findall('context/message')}
          for translation in iglob(os.path.join('src', 'translations', 'installer_*[!e][!n].ts')):
              originalTranslation = translation + '.tmp'
              os.rename(translation, originalTranslation)
              with open(originalTranslation, encoding='utf-8') as originalTranslationFile:
                  with open(translation, 'w', encoding='utf-8') as translationFile:
                      for line in originalTranslationFile:
                          match = SOURCE_PATTERN.match(line)
                          if not match:
                              translationFile.write(line)
                              continue
                          sourceId = match.group('name')
                          source = sourceMap.get(sourceId)
                          if source is None:
                              translationFile.write(line)
                              continue
                          translationFile.write(line.replace(sourceId, source))
              os.remove(originalTranslation)
      - name: Lint the translations
        run: |
          set +e
          .github/scripts/checkTranslation.py src/translations/dynamic_*[!e][!n].ts src/translations/main_*[!e][!n].ts
          ret=$?
          .github/scripts/checkTranslation.py src/translations/installer_*[!e][!n].ts -p '(?P<match>\d+)' '(?P<match>\$\{.*?\})' '(?P<match>\$\\[rn])' '(?P<match>\$\d+)'
          exit $(( $ret + $? ))
